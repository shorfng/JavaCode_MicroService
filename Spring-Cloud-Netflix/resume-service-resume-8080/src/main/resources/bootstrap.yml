server:
  port: 8080

spring:
  application:
    name: resume-service-resume
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/SpringCloud?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
    username: root
    password: root
  jpa:
    database: MySQL
    show-sql: true
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl  #避免将驼峰命名转换为下划线命名
  cloud:
    # config 客户端配置（和 cloud-config-server-9003 通信，并告知希望获取的配置信息在哪个文件中）
    config:
      # git 上的配置文件名称
      name: resume-service-resume
      profile: dev  # 后缀名称
      label: main   # 分支名称
      # cloud-config-server 配置中心地址
      uri: http://localhost:9003
  zipkin:
    # zipkin server 的请求地址
    base-url: http://127.0.0.1:9411
    sender:
      # web：客户端将踪迹日志数据通过网络请求的方式传送到服务端
      # kafka/rabbit：客户端将踪迹日志数据传递到 mq 进行中转
      type: web
  sleuth:
    sampler:
      # 采样率（1 代表 100% 全部采集）（默认0.1 代表 10% 的请求踪迹数据会被采集）
      # 生产环境下，请求量非常大，没有必要所有请求的踪迹数据都采集分析，对于网络包括server端压力都是比较大的，可以配置采样率采集一定比例的请求的踪迹数据进行分析即可
      probability: 1

# 将服务提供者注册到 Eureka 服务中心
eureka:
  client:
    service-url:
      # 注册到单实例（非集群模式），就写一个就可以
      # 注册到集群，把多个 Eureka server 地址使用逗号连接起来即可
      defaultZone: http://CloudEurekaServerA:8761/eureka,http://CloudEurekaServerB:8762/eureka
  instance:
    # 服务实例中显示 ip，而不是显示主机名（为了兼容老的 eureka 版本）
    prefer-ip-address: true
    # 自定义实例显示格式（加上版本号，便于多版本管理）
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@
    metadata-map:
      cluster: cl1
      region: rn1

# 暴露通信端口
management:
  endpoints:
    web:
      exposure:
        # include: refresh
        # *表示暴露所有端口
        include: "*"

# 分布式链路追踪 Sleuth
logging:
  level:
    org.springframework.web.servlet.DispatcherServlet: debug
    org.springframework.cloud.sleuth: debug
